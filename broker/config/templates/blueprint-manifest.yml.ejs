<%= spec.header %>

update:
  canaries: 0
  max_in_flight: 50
  canary_watch_time: 1000-100000
  update_watch_time: 1000-100000
  serial: false

instance_groups: &instance_groups
<%
var net;
var azs;
if (spec.multi_az_enabled){
  net = spec.networks[1];
  azs = '[z2]';
} else {
  net = spec.networks[0];
  azs = '[z1]';
}
const stemcell = spec.stemcell;
const members = net.static.slice(0,1);
const properties = {};
if (!spec.previous_manifest) {
  /* create scenario: pick random service instance properties */
  properties.blueprint = {
    admin: {
      username: SecureRandom.hex(16),
      password: SecureRandom.hex(16)
    }
  };
} else {
  if(!spec.previous_manifest.instance_groups){
    properties.blueprint = spec.previous_manifest.properties.blueprint;
  }else{
    properties.blueprint = spec.previous_manifest.instance_groups[0].jobs[0].properties;
  }
}
if(!spec.preUpdateAgentResponse && spec.previous_manifest){
  properties.blueprint.preUpdateAgentResponse = JSON.stringify(spec.previous_manifest.instance_groups[0].jobs[0].properties.preUpdateAgentResponse);
}
else if(spec.preUpdateAgentResponse){
  properties.blueprint.preUpdateAgentResponse = JSON.stringify(spec.preUpdateAgentResponse);
}
if(!spec.actions && spec.previous_manifest){
  properties.blueprint.actionResponse = JSON.stringify(spec.previous_manifest.instance_groups[0].jobs[0].properties.actionResponse);
}
else{
  properties.blueprint.actionResponse = JSON.stringify(spec.actions);
}
properties.blueprint.update_params = JSON.stringify(spec.parameters);
%>
- name: blueprint
  migrated_from:
  - name: blueprint_z1
  instances: <%= members.length %>
  networks:
  - name: <%= net.name %>
    static_ips: <%= JSON.stringify(members) %>
  vm_type: <%= p('vm_type') %>
  azs: <%= azs %>
  persistent_disk_type: <%= p('disk_type') %>
  stemcell: <%= stemcell.alias %>
  jobs:
  - name: blueprint
    release: blueprint
    blueprint: &blueprint
    properties:
      port: 8080
      actionResponse: <%= properties.blueprint.actionResponse %>
      preUpdateAgentResponse: <%= properties.blueprint.preUpdateAgentResponse %>
      admin:
        username: <%= properties.blueprint.admin.username %>
        password: <%= properties.blueprint.admin.password %>
  - name: broker-agent
    release: blueprint
    properties:
      username: <%= p('agent.auth.username') %>
      password: <%= p('agent.auth.password') %>
      provider: <%= JSON.stringify(p('agent.provider')) %>
      <% if (spec.parameters.multi_az && spec.parameters.serviceflow_name !== undefined) { %>
      update_params: <%= properties.blueprint.update_params %>
      <% } %>